package com.student.application;

import com.student.application.model.Student;
import com.student.application.repository.StudentRepository;
import org.apache.tomcat.util.http.fileupload.RequestContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import java.util.ArrayList;
import java.util.List;
import java.util.*;

@RestController
@RequestMapping("student")
public class StudentRestControllerImpl<consumes> {

    @Autowired
    Student student;

    @Autowired
    StudentRepository studentRepository;

    //get all student
    @GetMapping(value="student")
    public ResponseEntity<List<Student>> getAllStudent(RequestContext requestContext) {
        List<Student> allStudents = studentRepository.findAll();
        List<Student> responseStudentList = new ArrayList<>(allStudents);
        Collections.reverse(responseStudentList);
        return new ResponseEntity<List<Student>>(responseStudentList, HttpStatus.OK);
    }

    //Fetches Student by id
    @GetMapping("student/{id}")
    public ResponseEntity<Student> getArticleById(@PathVariable("id") Integer studentId) {
        Student student = new Student();
        BeanUtils.copyProperties(studentRepository.getArticleById(studentId), student);
        return new ResponseEntity<Student>(student, HttpStatus.OK);
    }

    //insert a student by student id
    @PostMapping("student")
    public ResponseEntity<Void> addArticle(@RequestBody Student student, UriComponentsBuilder builder) {
        try {
            boolean flag = studentRepository.insertStudent(student);
            if (!flag) {
                return new ResponseEntity<Void>(HttpStatus.CONFLICT);
            }
            HttpHeaders headers = new HttpHeaders();
            headers.setLocation(builder.path("/student/{id}").buildAndExpand(student.getStudentId()).toUri());
            return new ResponseEntity<Void>(headers, HttpStatus.CREATED);

        }catch(Exception ex){
            return new ResponseEntity<Void>(HttpStatus.BAD_REQUEST);
        }
    }


    //Updates student
    @PutMapping("article")
    public ResponseEntity<Student> updateArticle(@RequestBody Student student) {
        try{
            boolean flag = studentRepository.updateStudent(student);
            if(!flag)
                return new ResponseEntity<Student>(HttpStatus.BAD_REQUEST);
            return new ResponseEntity<Student>(HttpStatus.OK);
        }catch(Exception ex){
            return new ResponseEntity<Student>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }


    //Deletes article by id
    @DeleteMapping("student/{id}")
    public ResponseEntity<Void> deleteArticle(@PathVariable("StudentId") Integer studentId) {
        studentRepository.deleteStudent(studentId);
        return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
    }
}
